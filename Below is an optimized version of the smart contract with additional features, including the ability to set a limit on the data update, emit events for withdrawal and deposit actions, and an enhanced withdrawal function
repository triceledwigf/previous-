// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/access/Ownable.sol";

contract AdvancedSmartContract is Ownable {
    uint256 private data;
    uint256 private constant MAX_DATA_VALUE = 1000;

    event DataUpdated(uint256 newData);
    event Withdrawal(address indexed to, uint256 amount);
    event Deposit(address indexed from, uint256 amount);

    constructor(uint256 initialData) {
        require(initialData <= MAX_DATA_VALUE, "Initial data exceeds maximum allowed value");
        data = initialData;
    }

    function updateData(uint256 newData) external onlyOwner {
        require(newData != data && newData <= MAX_DATA_VALUE, "Invalid new data value");
        data = newData;
        emit DataUpdated(newData);
    }

    function getData() external view returns (uint256) {
        return data;
    }

    function getContractBalance() external view onlyOwner returns (uint256) {
        return address(this).balance;
    }

    function withdraw(uint256 amount) external onlyOwner {
        require(amount <= address(this).balance, "Insufficient contract balance");
        payable(owner()).transfer(amount);
        emit Withdrawal(owner(), amount);
    }

    function deposit() external payable {
        require(msg.value > 0, "Deposit amount must be greater than zero");
        emit Deposit(msg.sender, msg.value);
    }

    receive() external payable {
        emit Deposit(msg.sender, msg.value);
    }
}
