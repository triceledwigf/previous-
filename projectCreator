pragma solidity ^0.8.0;

contract SimpleCrowdfunding {
    address public creator;
    uint256 public goal;
    uint256 public deadline;
    mapping(address => uint256) public contributions;
    uint256 public totalContributions;

    event FundingReceived(address indexed contributor, uint256 amount);
    event ProjectFunded(uint256 totalAmount);

    modifier onlyCreator() {
        require(msg.sender == creator, "Not the creator");
        _;
    }

    modifier deadlineReached() {
        require(block.timestamp >= deadline, "Deadline not reached");
        _;
    }

    constructor(uint256 _goal, uint256 durationDays) {
        creator = msg.sender;
        goal = _goal;
        deadline = block.timestamp + durationDays * 1 days;
    }

    function contribute() external payable {
        require(block.timestamp < deadline, "Crowdfunding ended");
        require(msg.value > 0, "Contribution must be greater than 0");

        contributions[msg.sender] += msg.value;
        totalContributions += msg.value;

        emit FundingReceived(msg.sender, msg.value);

        if (totalContributions >= goal) {
            emit ProjectFunded(totalContributions);
        }
    }

    function withdrawFunds() external onlyCreator deadlineReached {
        require(totalContributions >= goal, "Goal not reached");
        payable(creator).transfer(totalContributions);
    }
}
